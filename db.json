{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/flow/img1.png","path":"images/flow/img1.png","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/gif1.gif","path":"img/gif1.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img1.jpg","path":"img/img1.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img2.jpg","path":"img/img2.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img3.jpg","path":"img/img3.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img4.jpg","path":"img/img4.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img5.jpg","path":"img/img5.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img7.jpg","path":"img/img7.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img6.jpg","path":"img/img6.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img8.jpg","path":"img/img8.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/img9.jpg","path":"img/img9.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/let和const的理解补充.md","hash":"675ceefb14857730651592e558933195a1d49b7d","modified":1639382220278},{"_id":"source/_posts/流程图-X6.md","hash":"a75c82db5ad86fb5be40198178a6eaeded3a9524","modified":1639462250318},{"_id":"source/categories/index.md","hash":"d10cd0a81afd49f108d996dfdbc8c490616ce8a1","modified":1639365820692},{"_id":"source/tags/index.md","hash":"5a9ab58847395d8d0b3db78740ad62b5dcefa027","modified":1639127504220},{"_id":"source/images/flow/img1.png","hash":"89fd27f00f4029b002ea2a1d38a0c06f0a9c228f","modified":1639462004272},{"_id":"themes/butterfly/_config.yml","hash":"937b321c4c0e0da8b6faa78cef3107aa924de634","modified":1639378236865},{"_id":"themes/butterfly/package.json","hash":"5b2e9f99b09d9dc68d34fe6a37b4943df2bbc547","modified":1637769811000},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1637769811000},{"_id":"themes/butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1637769811000},{"_id":"themes/butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1637769811000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1637769811000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1637769811000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1637769811000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1637769811000},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1637769811000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1637769811000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1637769811000},{"_id":"themes/butterfly/languages/en.yml","hash":"7fe7528ed2778fe39444df2bc7e64f09e1302e97","modified":1637769811000},{"_id":"themes/butterfly/languages/default.yml","hash":"1177f2177945c3e2447c6c0208e6ffdf0c0b186c","modified":1637769811000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"b1ba98565fe2d28e956225cf9e8a21f329ee060e","modified":1637769811000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"38b32ab2aa3e2ebb9ef3c993c8dca42f1e000cd5","modified":1637769811000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1637769811000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1637769811000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"5945f6f7f963b3ed1cc50e7e7d2e4929e1c1440c","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1637769811000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"428758c2459fd31efaf816c39693edb4f716b861","modified":1637769811000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1637769811000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1637769811000},{"_id":"themes/butterfly/scripts/events/config.js","hash":"00fa19f0ccaac183a2133244641fdd152ade6316","modified":1637769811000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1637769811000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1637769811000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1637769811000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1637769811000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1637769811000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1637769811000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1637769811000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"a2484895d10b36b5da4d34b19e35dbfcf8138be5","modified":1637769811000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1637769811000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1637769811000},{"_id":"themes/butterfly/source/css/var.styl","hash":"7e9123c64dd7f589db46ba9d7416c6537b8243ff","modified":1637769811000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1637769811000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1637769811000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1637769811000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1637769811000},{"_id":"themes/butterfly/source/img/img5.jpg","hash":"19a1ebb8c6ebeccfbbd86a8cc3b0900771d057b7","modified":1639097478000},{"_id":"themes/butterfly/source/js/main.js","hash":"5c72f1929f9885251d0f2e6ebda058b0b8d782b7","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1637769811000},{"_id":"themes/butterfly/source/js/utils.js","hash":"3ee4bd9071dc6e854ffa33964f3a8da2ee2a8409","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"f579212cc4e61eeae7523ad33fe4183f6d1ae1f5","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1637769811000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"70f7edd6ac23af71a89bdfb624826ae107f6fbf2","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"362e20e9d244b75eb3412597261c74dc6ad5b346","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"069e7c20ca3dfff2dd0db750867377dcff907f9a","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"f6b31b9fde818ad03f35fd70855444bd5d564142","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1637769811000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"462511bcb6d4875417334377536c2b0d942ac8fa","modified":1637769811000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d9bbe20a4029e542fee9f1e1013d28d767605ffc","modified":1637769811000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"facf3bec0afce3bc6d077cf1939818efc7fe3bf1","modified":1637769811000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1637769811000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"a0e4f60e46a81f366b59d7040bc95fa5b2165f73","modified":1637769811000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f93f5c4aa121af8f5bb1ee7da6b69dd85f0b16fe","modified":1637769811000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1637769811000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1637769811000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"5151aee16a39d522efb595f70494cdcc71fec154","modified":1637769811000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1637769811000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"91dfd28d7e5f2113e27c8ae854337d316ca1c48f","modified":1637769811000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2fe333a5fb7e2355826b2e5ac8ccb561bc894598","modified":1637769811000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"8fe1fc96e3123bec03a37a29479f2d4cbb2926bf","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"9cee2b1dcfa4f0578ea917e0719aa59fcb158c76","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"193a05ab27aa5ea0fbbe0066f841cbd540db6517","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b13bda9d22b3b32b1f48e48521f6e39a154e5596","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"5bd55d1388b954d851ab2b84ea5938ed13f330f7","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"db839912634f341d290f98e7cf5e1c42f03a4f7d","modified":1637769811000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"66c8c94bdc62e00e1dd848582aa2612ae22c1066","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"f28ceaf53cb6cdd2ed727c3a34301f22bb13ad6b","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"e8e1ef4640750a6328d7dcb28d5b1e038a280217","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f08d23dd704ba358a4d8a1dacd48be79fb4019c7","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1637769811000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1637769811000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1637769811000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1637769811000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1637769811000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"72911c7b42e0174a979c09ead3f42ee24136feae","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1637769811000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1637769811000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"6852d4fa5fff3fe52fdc41875a2c7af57f286b3a","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"70683b2281e60e6784f31016bcbcd2d2293eaec5","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"0224012ba5aa2770c16ec95ad126d6fbe9c1aef5","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1637769811000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1637769811000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1637769811000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1637769811000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1fa64def79b4bfa3a6f3985d4e7acdff5b981617","modified":1637769811000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1637769811000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1637769811000},{"_id":"themes/butterfly/source/img/img2.jpg","hash":"5cf08aacdddf35103acea0b6707c850d46a82f0f","modified":1639097478000},{"_id":"themes/butterfly/source/img/img1.jpg","hash":"55ce160c113e0ecc4054592da541466c76b9b098","modified":1639097478000},{"_id":"themes/butterfly/source/img/img7.jpg","hash":"7a7516a10b29c43c6233e313fb7018b1fe187e42","modified":1639097478000},{"_id":"themes/butterfly/source/img/img6.jpg","hash":"0560218f75867c9ca53c6e3cf38465dda3508a03","modified":1639097478000},{"_id":"themes/butterfly/source/img/img4.jpg","hash":"f3bf5dad6412e1cc50a5c590dcbbcd37e8cb42f7","modified":1639097478000},{"_id":"themes/butterfly/source/img/img3.jpg","hash":"c258eefa8aba87b89feb3d2f0cdd2944cedff0d1","modified":1639097478000},{"_id":"themes/butterfly/source/img/img8.jpg","hash":"a214870d42a91ccff8182fb48363d5573797dc5e","modified":1639098656000},{"_id":"themes/butterfly/source/img/img9.jpg","hash":"c207aaddf47ea6848264010b18a426b97358ea96","modified":1639098656000},{"_id":"themes/butterfly/source/img/gif1.gif","hash":"e6606b98f7b989425f7a5899f7c7062448761b2c","modified":1639122877977},{"_id":"public/search.xml","hash":"c26e8e2ce27f797b0c5220c3d12c715417d7cae0","modified":1639462292947},{"_id":"public/categories/index.html","hash":"fc6736f64bd43b6eff36a8c5844fffd49009ca54","modified":1639462292947},{"_id":"public/tags/index.html","hash":"b8d55f747005ee3776ca06d40b8784296d121031","modified":1639462292947},{"_id":"public/archives/index.html","hash":"c209af41b8c925d80130dbfd87cad2e5497146d2","modified":1639462292947},{"_id":"public/categories/深一丢丢/index.html","hash":"01ee2c63557f8af1a77a77ec50e0034328dd756f","modified":1639462292947},{"_id":"public/categories/可视化/index.html","hash":"9a9ce813156293e6bcf1270e5d9b3e789bf717b6","modified":1639462292947},{"_id":"public/archives/2021/index.html","hash":"92ebc0b2514d8d12612e9f5ec08a22b280f7e03a","modified":1639462292947},{"_id":"public/archives/2021/12/index.html","hash":"a2d94f240bd98fd4b450708248acd88be497b36e","modified":1639462292947},{"_id":"public/tags/ES6/index.html","hash":"cd4d454c1f7c4145b4db223f5ad3043414fbd1d0","modified":1639462292947},{"_id":"public/tags/vue3/index.html","hash":"a64792cc721ac7de09b372d65d62da36dd3cbaa8","modified":1639462292947},{"_id":"public/tags/笔记/index.html","hash":"f975d652f4ccb201fd984f6cdd269414582fc08d","modified":1639462292947},{"_id":"public/2021/12/13/let和const的理解补充/index.html","hash":"85fc23e90d55d57e48a6b4d50ab2b7cbd394412b","modified":1639462292947},{"_id":"public/2021/12/10/流程图-X6/index.html","hash":"d4f7e0fb7fa803c71b891e1e86ec43fa2aff2080","modified":1639462292947},{"_id":"public/index.html","hash":"91838b756bf7b8f174dd16bd2abf0ae61e170b6a","modified":1639462292947},{"_id":"public/images/flow/img1.png","hash":"89fd27f00f4029b002ea2a1d38a0c06f0a9c228f","modified":1639462292947},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1639462292947},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1639462292947},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1639462292947},{"_id":"public/img/img5.jpg","hash":"19a1ebb8c6ebeccfbbd86a8cc3b0900771d057b7","modified":1639462292947},{"_id":"public/img/img1.jpg","hash":"55ce160c113e0ecc4054592da541466c76b9b098","modified":1639462292947},{"_id":"public/img/img2.jpg","hash":"5cf08aacdddf35103acea0b6707c850d46a82f0f","modified":1639462292947},{"_id":"public/img/img7.jpg","hash":"7a7516a10b29c43c6233e313fb7018b1fe187e42","modified":1639462292947},{"_id":"public/img/img6.jpg","hash":"0560218f75867c9ca53c6e3cf38465dda3508a03","modified":1639462292947},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639462292947},{"_id":"public/css/index.css","hash":"7cfdfdc0e252cbbdf517e35de7cf9f893b270c46","modified":1639462292947},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1639462292947},{"_id":"public/js/main.js","hash":"5c72f1929f9885251d0f2e6ebda058b0b8d782b7","modified":1639462292947},{"_id":"public/img/img3.jpg","hash":"c258eefa8aba87b89feb3d2f0cdd2944cedff0d1","modified":1639462292947},{"_id":"public/img/img4.jpg","hash":"f3bf5dad6412e1cc50a5c590dcbbcd37e8cb42f7","modified":1639462292947},{"_id":"public/img/img8.jpg","hash":"a214870d42a91ccff8182fb48363d5573797dc5e","modified":1639462292947},{"_id":"public/js/utils.js","hash":"3ee4bd9071dc6e854ffa33964f3a8da2ee2a8409","modified":1639462292947},{"_id":"public/js/search/local-search.js","hash":"72911c7b42e0174a979c09ead3f42ee24136feae","modified":1639462292947},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1639462292947},{"_id":"public/img/img9.jpg","hash":"c207aaddf47ea6848264010b18a426b97358ea96","modified":1639462292947},{"_id":"public/img/gif1.gif","hash":"e6606b98f7b989425f7a5899f7c7062448761b2c","modified":1639462292947}],"Category":[{"name":"深一丢丢","_id":"ckx5pipri0005nsuneb5g3ntq"},{"name":"可视化","_id":"ckx5piprj0007nsun30ql5mki"}],"Data":[],"Page":[{"title":"文章分类","date":"2017-05-27T05:47:40.000Z","type":"categories","top_img":"/img/img9.jpg","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类 \ndate: 2017-05-27 13:47:40\ntype: \"categories\"\ntop_img: \"/img/img9.jpg\"\n---","updated":"2021-12-13T03:23:40.692Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckx5pipr70000nsun4c5oei0v","content":"","site":{"data":{}},"cover":"/img/img2.jpg","excerpt":"","more":""},{"title":"标签","date":"2017-05-27T05:47:40.000Z","type":"tags","top_img":"/img/img8.jpg","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-05-27 13:47:40\ntype: \"tags\"\ntop_img: \"/img/img8.jpg\"\n---","updated":"2021-12-10T09:11:44.220Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckx5piprd0002nsun7gci8e4c","content":"","site":{"data":{}},"cover":"/img/gif1.gif","excerpt":"","more":""}],"Post":[{"title":"【深一丢丢】let和const的理解补充","date":"2021-12-13T06:15:01.000Z","_content":"\n## 前言\n最近在掘金上看到很多人在作用域上的理解。但是发现每个人描述的都有些区别并且和自己理解中的有些不同。\n在查找相关资料后，整理了一下let和const的理解补充\n\n## let，const到底有没有声明变量提升\n\n**结论：** 有\n\n## 说明\n\n#### 执行上下文\n\n首先需要理解执行上下文，词法环境，变量环境的抽象概念。（此文章不做说明）  \n\n**重点：**在 ES6 中，**词法环境**和**变量环境**的一个不同就是前者被用来**存储函数声明和变量（let 和 const）绑定**，而后者只用来**存储 var 变量绑定**。\n```\nlet a = 20;\nconst b = 30;\nvar c;\n\nfunction multiply(e, f) {\n var g = 20;\n return e * f * g;\n}\n\nc = multiply(20, 30);\n\n```\n执行上下文看起来像这样：\n```\nGlobalExectionContext = {\n\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Object\",\n      // 在这里绑定标识符\n      a: < uninitialized >,\n      b: < uninitialized >,\n      multiply: < func >\n    }\n    outer: <null>\n  },\n\n  VariableEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Object\",\n      // 在这里绑定标识符\n      c: undefined,\n    }\n    outer: <null>\n  }\n}\n\nFunctionExectionContext = {\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Declarative\",\n      // 在这里绑定标识符\n      Arguments: {0: 20, 1: 30, length: 2},\n    },\n    outer: <GlobalLexicalEnvironment>\n  },\n\nVariableEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Declarative\",\n      // 在这里绑定标识符\n      g: undefined\n    },\n    outer: <GlobalLexicalEnvironment>\n  }\n}\n\n```\n<code>let</code>  和 <code>const</code> 定义的变量并没有关联任何值，但 <code>var</code> 定义的变量被设成了 <code>undefined</code>。  \n\n这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为<code> undefined（var 情况下）</code>，或者<code>未初始化（let 和 const 情况下）</code>。  \n\n这就是为什么可以在声明之前访问 <code>var</code> 定义的变量（虽然是 undefined），但是在声明之前访问 <code>let</code> 和 <code>const</code> 的变量会得到一个引用错误。  \n\n这就是变量声明提升。\n\n#### 总结\n一个变量有三个操作：\n1. <code>声明(提到作用域顶部)</code>\n2. <code>初始化(赋默认值)</code>\n3. <code>赋值(继续赋值)</code>。   \n\n**var**：一开始变量声明提升，然后初始化成undefined，代码执行到那行的时候赋值。   \n**let**：一开始变量声明提升，然后没有初始化分配内存，代码执行到那行初始化，之后对变量继续操作是赋值。**因为没有初始化分配内存，所以会报错，这是暂时性死区。**   \n**const：**只有声明和初始化，没有赋值操作，所以不可变。","source":"_posts/let和const的理解补充.md","raw":"---\ntitle: 【深一丢丢】let和const的理解补充\ndate: 2021-12-13 14:15:01\ntags: [ES6, 笔记]\ncategories: \n    - [深一丢丢]\n---\n\n## 前言\n最近在掘金上看到很多人在作用域上的理解。但是发现每个人描述的都有些区别并且和自己理解中的有些不同。\n在查找相关资料后，整理了一下let和const的理解补充\n\n## let，const到底有没有声明变量提升\n\n**结论：** 有\n\n## 说明\n\n#### 执行上下文\n\n首先需要理解执行上下文，词法环境，变量环境的抽象概念。（此文章不做说明）  \n\n**重点：**在 ES6 中，**词法环境**和**变量环境**的一个不同就是前者被用来**存储函数声明和变量（let 和 const）绑定**，而后者只用来**存储 var 变量绑定**。\n```\nlet a = 20;\nconst b = 30;\nvar c;\n\nfunction multiply(e, f) {\n var g = 20;\n return e * f * g;\n}\n\nc = multiply(20, 30);\n\n```\n执行上下文看起来像这样：\n```\nGlobalExectionContext = {\n\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Object\",\n      // 在这里绑定标识符\n      a: < uninitialized >,\n      b: < uninitialized >,\n      multiply: < func >\n    }\n    outer: <null>\n  },\n\n  VariableEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Object\",\n      // 在这里绑定标识符\n      c: undefined,\n    }\n    outer: <null>\n  }\n}\n\nFunctionExectionContext = {\n  ThisBinding: <Global Object>,\n\n  LexicalEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Declarative\",\n      // 在这里绑定标识符\n      Arguments: {0: 20, 1: 30, length: 2},\n    },\n    outer: <GlobalLexicalEnvironment>\n  },\n\nVariableEnvironment: {\n    EnvironmentRecord: {\n      Type: \"Declarative\",\n      // 在这里绑定标识符\n      g: undefined\n    },\n    outer: <GlobalLexicalEnvironment>\n  }\n}\n\n```\n<code>let</code>  和 <code>const</code> 定义的变量并没有关联任何值，但 <code>var</code> 定义的变量被设成了 <code>undefined</code>。  \n\n这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为<code> undefined（var 情况下）</code>，或者<code>未初始化（let 和 const 情况下）</code>。  \n\n这就是为什么可以在声明之前访问 <code>var</code> 定义的变量（虽然是 undefined），但是在声明之前访问 <code>let</code> 和 <code>const</code> 的变量会得到一个引用错误。  \n\n这就是变量声明提升。\n\n#### 总结\n一个变量有三个操作：\n1. <code>声明(提到作用域顶部)</code>\n2. <code>初始化(赋默认值)</code>\n3. <code>赋值(继续赋值)</code>。   \n\n**var**：一开始变量声明提升，然后初始化成undefined，代码执行到那行的时候赋值。   \n**let**：一开始变量声明提升，然后没有初始化分配内存，代码执行到那行初始化，之后对变量继续操作是赋值。**因为没有初始化分配内存，所以会报错，这是暂时性死区。**   \n**const：**只有声明和初始化，没有赋值操作，所以不可变。","slug":"let和const的理解补充","published":1,"updated":"2021-12-13T07:57:00.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5pipra0001nsungebja9oa","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在掘金上看到很多人在作用域上的理解。但是发现每个人描述的都有些区别并且和自己理解中的有些不同。<br>在查找相关资料后，整理了一下let和const的理解补充</p>\n<h2 id=\"let，const到底有没有声明变量提升\"><a href=\"#let，const到底有没有声明变量提升\" class=\"headerlink\" title=\"let，const到底有没有声明变量提升\"></a>let，const到底有没有声明变量提升</h2><p><strong>结论：</strong> 有</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><h4 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h4><p>首先需要理解执行上下文，词法环境，变量环境的抽象概念。（此文章不做说明）  </p>\n<p><strong>重点：</strong>在 ES6 中，<strong>词法环境</strong>和<strong>变量环境</strong>的一个不同就是前者被用来<strong>存储函数声明和变量（let 和 const）绑定</strong>，而后者只用来<strong>存储 var 变量绑定</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 20;</span><br><span class=\"line\">const b = 30;</span><br><span class=\"line\">var c;</span><br><span class=\"line\"></span><br><span class=\"line\">function multiply(e, f) &#123;</span><br><span class=\"line\"> var g = 20;</span><br><span class=\"line\"> return e * f * g;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c = multiply(20, 30);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行上下文看起来像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalExectionContext = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ThisBinding: &lt;Global Object&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">  LexicalEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Object&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      a: &lt; uninitialized &gt;,</span><br><span class=\"line\">      b: &lt; uninitialized &gt;,</span><br><span class=\"line\">      multiply: &lt; func &gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outer: &lt;null&gt;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  VariableEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Object&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      c: undefined,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outer: &lt;null&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FunctionExectionContext = &#123;</span><br><span class=\"line\">  ThisBinding: &lt;Global Object&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">  LexicalEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Declarative&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">VariableEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Declarative&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      g: undefined</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>let</code>  和 <code>const</code> 定义的变量并没有关联任何值，但 <code>var</code> 定义的变量被设成了 <code>undefined</code>。  </p>\n<p>这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为<code> undefined（var 情况下）</code>，或者<code>未初始化（let 和 const 情况下）</code>。  </p>\n<p>这就是为什么可以在声明之前访问 <code>var</code> 定义的变量（虽然是 undefined），但是在声明之前访问 <code>let</code> 和 <code>const</code> 的变量会得到一个引用错误。  </p>\n<p>这就是变量声明提升。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>一个变量有三个操作：</p>\n<ol>\n<li><code>声明(提到作用域顶部)</code></li>\n<li><code>初始化(赋默认值)</code></li>\n<li><code>赋值(继续赋值)</code>。   </li>\n</ol>\n<p><strong>var</strong>：一开始变量声明提升，然后初始化成undefined，代码执行到那行的时候赋值。<br><strong>let</strong>：一开始变量声明提升，然后没有初始化分配内存，代码执行到那行初始化，之后对变量继续操作是赋值。<strong>因为没有初始化分配内存，所以会报错，这是暂时性死区。</strong><br><strong>const：</strong>只有声明和初始化，没有赋值操作，所以不可变。</p>\n","site":{"data":{}},"cover":"/img/img5.jpg","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在掘金上看到很多人在作用域上的理解。但是发现每个人描述的都有些区别并且和自己理解中的有些不同。<br>在查找相关资料后，整理了一下let和const的理解补充</p>\n<h2 id=\"let，const到底有没有声明变量提升\"><a href=\"#let，const到底有没有声明变量提升\" class=\"headerlink\" title=\"let，const到底有没有声明变量提升\"></a>let，const到底有没有声明变量提升</h2><p><strong>结论：</strong> 有</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><h4 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h4><p>首先需要理解执行上下文，词法环境，变量环境的抽象概念。（此文章不做说明）  </p>\n<p><strong>重点：</strong>在 ES6 中，<strong>词法环境</strong>和<strong>变量环境</strong>的一个不同就是前者被用来<strong>存储函数声明和变量（let 和 const）绑定</strong>，而后者只用来<strong>存储 var 变量绑定</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = 20;</span><br><span class=\"line\">const b = 30;</span><br><span class=\"line\">var c;</span><br><span class=\"line\"></span><br><span class=\"line\">function multiply(e, f) &#123;</span><br><span class=\"line\"> var g = 20;</span><br><span class=\"line\"> return e * f * g;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c = multiply(20, 30);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行上下文看起来像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalExectionContext = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ThisBinding: &lt;Global Object&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">  LexicalEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Object&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      a: &lt; uninitialized &gt;,</span><br><span class=\"line\">      b: &lt; uninitialized &gt;,</span><br><span class=\"line\">      multiply: &lt; func &gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outer: &lt;null&gt;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  VariableEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Object&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      c: undefined,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outer: &lt;null&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FunctionExectionContext = &#123;</span><br><span class=\"line\">  ThisBinding: &lt;Global Object&gt;,</span><br><span class=\"line\"></span><br><span class=\"line\">  LexicalEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Declarative&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">VariableEnvironment: &#123;</span><br><span class=\"line\">    EnvironmentRecord: &#123;</span><br><span class=\"line\">      Type: &quot;Declarative&quot;,</span><br><span class=\"line\">      // 在这里绑定标识符</span><br><span class=\"line\">      g: undefined</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>let</code>  和 <code>const</code> 定义的变量并没有关联任何值，但 <code>var</code> 定义的变量被设成了 <code>undefined</code>。  </p>\n<p>这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为<code> undefined（var 情况下）</code>，或者<code>未初始化（let 和 const 情况下）</code>。  </p>\n<p>这就是为什么可以在声明之前访问 <code>var</code> 定义的变量（虽然是 undefined），但是在声明之前访问 <code>let</code> 和 <code>const</code> 的变量会得到一个引用错误。  </p>\n<p>这就是变量声明提升。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>一个变量有三个操作：</p>\n<ol>\n<li><code>声明(提到作用域顶部)</code></li>\n<li><code>初始化(赋默认值)</code></li>\n<li><code>赋值(继续赋值)</code>。   </li>\n</ol>\n<p><strong>var</strong>：一开始变量声明提升，然后初始化成undefined，代码执行到那行的时候赋值。<br><strong>let</strong>：一开始变量声明提升，然后没有初始化分配内存，代码执行到那行初始化，之后对变量继续操作是赋值。<strong>因为没有初始化分配内存，所以会报错，这是暂时性死区。</strong><br><strong>const：</strong>只有声明和初始化，没有赋值操作，所以不可变。</p>\n"},{"title":"【可视化】流程图-X6","date":"2021-12-10T03:21:23.000Z","_content":"\n## 前言\n一个简易版自定义流程图编辑器，antV-X6 + vue3 实现。  \n![路程图页面](/images/flow/img1.png)\n\n## 项目地址\n[项目地址](https://github.com/hystericalPerson/vue3-x6-editor-demo)\n<https://github.com/hystericalPerson/vue3-x6-editor-demo>\n\n## 组件结构\n流程图组件由三部分组件构成：\n+ 左侧流程子组件 <code>dnd</code>\n+ 中间画布组件 <code>graph</code>\n+ 右侧节点信息组件<code>nodeInfo</code>\n\n**注意**：左侧的流程子组件可以从<code>dnd</code>和<code>step</code>中选择一个。按照需要业务需要选择内置组件\n+ <code>dnd</code>组件拓展性强，基本由前端自己控制样式等，可选择vue或react等语言开发\n+ <code>step</code>组件拓展性弱，是X6自身已封装好的组件，方便开发\n\n\n## 代码实现\n1. 首先在组件index.vue中设置三个组件的ref以及一个流程对象（将流程对象统一管理，方便后续维护开发）。\n```\n// 定义ref\nconst refDnd = ref(null)\nconst refGraph = ref(null)\nconst refNodeInfo = ref(null)\n\n// 定义流程对象\nconst flow = reactive({\n    graph: null,\n    dnd: null,\n    nodeInfo: null\n})\nprovide('flow', flow)\n```\n2. 在能获取DOM（vue中<code>onMounted</code>）的情况下，执行<code>graph</code>的<code>init</code>。graph的代码基本都在init中声明\n```\n// graph init\nconst init = () => {\n    onCreateGraph()\n    onBindKey()\n    onBindPortsSetting()\n}\n```\n3. 在处理完2之后。执行<code>dnd.vue</code>的 <code>init</code>函数，然后将基本组件的拖拽事件绑定\n```\n// 初始化\nconst init = () => {\n    onCreateDnd()\n    onRegisterV3Comp()\n}\n```\n```\n// 创建dnd\nconst createDnd = () => {\n    editor.dnd = new Addon.Dnd({\n        target: editor.graph,\n        getDropNode: (node) => {\n            const cloneNode = node.clone({ keepId: true })\n            cloneNode.data = cmptCellInfo[cloneNode.id]\n            // 清空选区\n            nextTick(() => {\n                editor.graph.resetSelection(cloneNode)\n                cellClickCallback(cloneNode)\n            })\n            return cloneNode\n        }\n    })\n}\n```\n在创建vue组件的时候由于<code>template</code>覆盖了许多子组件的数据，因此在外部定义一个存储各个节点data的对象用于存储数据\n```\n// 创建vue3组件\nconst onRegisterV3Comp = () => {\n    for (const item in nodeInfo) {\n        Graph.registerVueComponent(`${item}`, {\n            template: `<${item} :info=\"allNodeData[currentId]\"></${item}>`,\n            components: {\n                [item]: nodeCmpt[item]\n            },\n            data () {\n                return {\n                    flow: flow,\n                    allNodeData: flow.allNodeData,\n                    currentId: ''\n                }\n            },\n            mounted () {\n                this.currentId = this.$el.closest('[data-shape=vue-shape]').getAttribute('data-cell-id')\n                if (!this.flow.allNodeData[this.currentId]) {\n                    this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item))\n                    cellNodeInfo.value && (this.flow.allNodeData[this.currentId] = cloneDeep(cellNodeInfo.value))\n                    !cellNodeInfo.value && (this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item)))\n                }\n            }\n        }, true)\n    }\n}\n```\n\n4. 处理右侧节点信息展示的双向绑定\n```\n<a-input v-model:value=\"flow.nodeInfo.name\" addon-before=\"名称\" class=\"info-input\"/>\n<a-input v-model:value=\"flow.nodeInfo.config\" addon-before=\"额外配置\" class=\"info-input\"/>\n```\n拓展业务可以从<code>flow.nodeInfo</code>对象中自己处理\n**注意**：处理好选中和未选中的情况\n\n5. 增加保存子节点和流程图的按钮和函数\n**用push即可**\n\n6. 在打开流程库的时候，使用遍历节点的方式将信息赋值到<code>flow.allNodeData</code>  \n**注意**：不要使用自带的方法<code>formJSON</code>，没有遍历节点右侧展示信息会出错\n```\n// 渲染画布\nconst renderGraph = (cells) => {\n    // 清空数据 画布\n    flow.graph.clearCells()\n    for (const key in flow.allNodeData) {\n        delete flow.allNodeData[key]\n    }\n    cells.forEach(cell => {\n        if (cell.shape !== 'edge') {\n            flow.allNodeData[cell.id] = cloneDeep(cell.data)\n            flow.graph.addNode(cell)\n        }\n    })\n    cells.forEach(cell => {\n        if (cell.shape === 'edge') {\n            flow.graph.addEdge(cell)\n        }\n    })\n}\n```\n7. 完成基本业务逻辑，其余如判断是否是单一节点之类的，在补充代码就好","source":"_posts/流程图-X6.md","raw":"---\ntitle: 【可视化】流程图-X6\ndate: 2021-12-10 11:21:23\ntags:  [vue3]\ncategories: \n    - [可视化]\n---\n\n## 前言\n一个简易版自定义流程图编辑器，antV-X6 + vue3 实现。  \n![路程图页面](/images/flow/img1.png)\n\n## 项目地址\n[项目地址](https://github.com/hystericalPerson/vue3-x6-editor-demo)\n<https://github.com/hystericalPerson/vue3-x6-editor-demo>\n\n## 组件结构\n流程图组件由三部分组件构成：\n+ 左侧流程子组件 <code>dnd</code>\n+ 中间画布组件 <code>graph</code>\n+ 右侧节点信息组件<code>nodeInfo</code>\n\n**注意**：左侧的流程子组件可以从<code>dnd</code>和<code>step</code>中选择一个。按照需要业务需要选择内置组件\n+ <code>dnd</code>组件拓展性强，基本由前端自己控制样式等，可选择vue或react等语言开发\n+ <code>step</code>组件拓展性弱，是X6自身已封装好的组件，方便开发\n\n\n## 代码实现\n1. 首先在组件index.vue中设置三个组件的ref以及一个流程对象（将流程对象统一管理，方便后续维护开发）。\n```\n// 定义ref\nconst refDnd = ref(null)\nconst refGraph = ref(null)\nconst refNodeInfo = ref(null)\n\n// 定义流程对象\nconst flow = reactive({\n    graph: null,\n    dnd: null,\n    nodeInfo: null\n})\nprovide('flow', flow)\n```\n2. 在能获取DOM（vue中<code>onMounted</code>）的情况下，执行<code>graph</code>的<code>init</code>。graph的代码基本都在init中声明\n```\n// graph init\nconst init = () => {\n    onCreateGraph()\n    onBindKey()\n    onBindPortsSetting()\n}\n```\n3. 在处理完2之后。执行<code>dnd.vue</code>的 <code>init</code>函数，然后将基本组件的拖拽事件绑定\n```\n// 初始化\nconst init = () => {\n    onCreateDnd()\n    onRegisterV3Comp()\n}\n```\n```\n// 创建dnd\nconst createDnd = () => {\n    editor.dnd = new Addon.Dnd({\n        target: editor.graph,\n        getDropNode: (node) => {\n            const cloneNode = node.clone({ keepId: true })\n            cloneNode.data = cmptCellInfo[cloneNode.id]\n            // 清空选区\n            nextTick(() => {\n                editor.graph.resetSelection(cloneNode)\n                cellClickCallback(cloneNode)\n            })\n            return cloneNode\n        }\n    })\n}\n```\n在创建vue组件的时候由于<code>template</code>覆盖了许多子组件的数据，因此在外部定义一个存储各个节点data的对象用于存储数据\n```\n// 创建vue3组件\nconst onRegisterV3Comp = () => {\n    for (const item in nodeInfo) {\n        Graph.registerVueComponent(`${item}`, {\n            template: `<${item} :info=\"allNodeData[currentId]\"></${item}>`,\n            components: {\n                [item]: nodeCmpt[item]\n            },\n            data () {\n                return {\n                    flow: flow,\n                    allNodeData: flow.allNodeData,\n                    currentId: ''\n                }\n            },\n            mounted () {\n                this.currentId = this.$el.closest('[data-shape=vue-shape]').getAttribute('data-cell-id')\n                if (!this.flow.allNodeData[this.currentId]) {\n                    this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item))\n                    cellNodeInfo.value && (this.flow.allNodeData[this.currentId] = cloneDeep(cellNodeInfo.value))\n                    !cellNodeInfo.value && (this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item)))\n                }\n            }\n        }, true)\n    }\n}\n```\n\n4. 处理右侧节点信息展示的双向绑定\n```\n<a-input v-model:value=\"flow.nodeInfo.name\" addon-before=\"名称\" class=\"info-input\"/>\n<a-input v-model:value=\"flow.nodeInfo.config\" addon-before=\"额外配置\" class=\"info-input\"/>\n```\n拓展业务可以从<code>flow.nodeInfo</code>对象中自己处理\n**注意**：处理好选中和未选中的情况\n\n5. 增加保存子节点和流程图的按钮和函数\n**用push即可**\n\n6. 在打开流程库的时候，使用遍历节点的方式将信息赋值到<code>flow.allNodeData</code>  \n**注意**：不要使用自带的方法<code>formJSON</code>，没有遍历节点右侧展示信息会出错\n```\n// 渲染画布\nconst renderGraph = (cells) => {\n    // 清空数据 画布\n    flow.graph.clearCells()\n    for (const key in flow.allNodeData) {\n        delete flow.allNodeData[key]\n    }\n    cells.forEach(cell => {\n        if (cell.shape !== 'edge') {\n            flow.allNodeData[cell.id] = cloneDeep(cell.data)\n            flow.graph.addNode(cell)\n        }\n    })\n    cells.forEach(cell => {\n        if (cell.shape === 'edge') {\n            flow.graph.addEdge(cell)\n        }\n    })\n}\n```\n7. 完成基本业务逻辑，其余如判断是否是单一节点之类的，在补充代码就好","slug":"流程图-X6","published":1,"updated":"2021-12-14T06:10:50.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5pipre0003nsundfd32uiz","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个简易版自定义流程图编辑器，antV-X6 + vue3 实现。<br><img src=\"/images/flow/img1.png\" alt=\"路程图页面\"></p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/hystericalPerson/vue3-x6-editor-demo\">项目地址</a><br><a href=\"https://github.com/hystericalPerson/vue3-x6-editor-demo\">https://github.com/hystericalPerson/vue3-x6-editor-demo</a></p>\n<h2 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h2><p>流程图组件由三部分组件构成：</p>\n<ul>\n<li>左侧流程子组件 <code>dnd</code></li>\n<li>中间画布组件 <code>graph</code></li>\n<li>右侧节点信息组件<code>nodeInfo</code></li>\n</ul>\n<p><strong>注意</strong>：左侧的流程子组件可以从<code>dnd</code>和<code>step</code>中选择一个。按照需要业务需要选择内置组件</p>\n<ul>\n<li><code>dnd</code>组件拓展性强，基本由前端自己控制样式等，可选择vue或react等语言开发</li>\n<li><code>step</code>组件拓展性弱，是X6自身已封装好的组件，方便开发</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><ol>\n<li><p>首先在组件index.vue中设置三个组件的ref以及一个流程对象（将流程对象统一管理，方便后续维护开发）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义ref</span><br><span class=\"line\">const refDnd = ref(null)</span><br><span class=\"line\">const refGraph = ref(null)</span><br><span class=\"line\">const refNodeInfo = ref(null)</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义流程对象</span><br><span class=\"line\">const flow = reactive(&#123;</span><br><span class=\"line\">    graph: null,</span><br><span class=\"line\">    dnd: null,</span><br><span class=\"line\">    nodeInfo: null</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">provide(&#x27;flow&#x27;, flow)</span><br></pre></td></tr></table></figure></li>\n<li><p>在能获取DOM（vue中<code>onMounted</code>）的情况下，执行<code>graph</code>的<code>init</code>。graph的代码基本都在init中声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// graph init</span><br><span class=\"line\">const init = () =&gt; &#123;</span><br><span class=\"line\">    onCreateGraph()</span><br><span class=\"line\">    onBindKey()</span><br><span class=\"line\">    onBindPortsSetting()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在处理完2之后。执行<code>dnd.vue</code>的 <code>init</code>函数，然后将基本组件的拖拽事件绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化</span><br><span class=\"line\">const init = () =&gt; &#123;</span><br><span class=\"line\">    onCreateDnd()</span><br><span class=\"line\">    onRegisterV3Comp()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建dnd</span><br><span class=\"line\">const createDnd = () =&gt; &#123;</span><br><span class=\"line\">    editor.dnd = new Addon.Dnd(&#123;</span><br><span class=\"line\">        target: editor.graph,</span><br><span class=\"line\">        getDropNode: (node) =&gt; &#123;</span><br><span class=\"line\">            const cloneNode = node.clone(&#123; keepId: true &#125;)</span><br><span class=\"line\">            cloneNode.data = cmptCellInfo[cloneNode.id]</span><br><span class=\"line\">            // 清空选区</span><br><span class=\"line\">            nextTick(() =&gt; &#123;</span><br><span class=\"line\">                editor.graph.resetSelection(cloneNode)</span><br><span class=\"line\">                cellClickCallback(cloneNode)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            return cloneNode</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建vue组件的时候由于<code>template</code>覆盖了许多子组件的数据，因此在外部定义一个存储各个节点data的对象用于存储数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建vue3组件</span><br><span class=\"line\">const onRegisterV3Comp = () =&gt; &#123;</span><br><span class=\"line\">    for (const item in nodeInfo) &#123;</span><br><span class=\"line\">        Graph.registerVueComponent(`$&#123;item&#125;`, &#123;</span><br><span class=\"line\">            template: `&lt;$&#123;item&#125; :info=&quot;allNodeData[currentId]&quot;&gt;&lt;/$&#123;item&#125;&gt;`,</span><br><span class=\"line\">            components: &#123;</span><br><span class=\"line\">                [item]: nodeCmpt[item]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            data () &#123;</span><br><span class=\"line\">                return &#123;</span><br><span class=\"line\">                    flow: flow,</span><br><span class=\"line\">                    allNodeData: flow.allNodeData,</span><br><span class=\"line\">                    currentId: &#x27;&#x27;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted () &#123;</span><br><span class=\"line\">                this.currentId = this.$el.closest(&#x27;[data-shape=vue-shape]&#x27;).getAttribute(&#x27;data-cell-id&#x27;)</span><br><span class=\"line\">                if (!this.flow.allNodeData[this.currentId]) &#123;</span><br><span class=\"line\">                    this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item))</span><br><span class=\"line\">                    cellNodeInfo.value &amp;&amp; (this.flow.allNodeData[this.currentId] = cloneDeep(cellNodeInfo.value))</span><br><span class=\"line\">                    !cellNodeInfo.value &amp;&amp; (this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item)))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, true)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理右侧节点信息展示的双向绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-input v-model:value=&quot;flow.nodeInfo.name&quot; addon-before=&quot;名称&quot; class=&quot;info-input&quot;/&gt;</span><br><span class=\"line\">&lt;a-input v-model:value=&quot;flow.nodeInfo.config&quot; addon-before=&quot;额外配置&quot; class=&quot;info-input&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>拓展业务可以从<code>flow.nodeInfo</code>对象中自己处理</p>\n</li>\n</ol>\n<p><strong>注意</strong>：处理好选中和未选中的情况</p>\n<ol start=\"5\">\n<li>增加保存子节点和流程图的按钮和函数</li>\n</ol>\n<p><strong>用push即可</strong></p>\n<ol start=\"6\">\n<li>在打开流程库的时候，使用遍历节点的方式将信息赋值到<code>flow.allNodeData</code>  </li>\n</ol>\n<p><strong>注意</strong>：不要使用自带的方法<code>formJSON</code>，没有遍历节点右侧展示信息会出错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染画布</span><br><span class=\"line\">const renderGraph = (cells) =&gt; &#123;</span><br><span class=\"line\">    // 清空数据 画布</span><br><span class=\"line\">    flow.graph.clearCells()</span><br><span class=\"line\">    for (const key in flow.allNodeData) &#123;</span><br><span class=\"line\">        delete flow.allNodeData[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cells.forEach(cell =&gt; &#123;</span><br><span class=\"line\">        if (cell.shape !== &#x27;edge&#x27;) &#123;</span><br><span class=\"line\">            flow.allNodeData[cell.id] = cloneDeep(cell.data)</span><br><span class=\"line\">            flow.graph.addNode(cell)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    cells.forEach(cell =&gt; &#123;</span><br><span class=\"line\">        if (cell.shape === &#x27;edge&#x27;) &#123;</span><br><span class=\"line\">            flow.graph.addEdge(cell)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>完成基本业务逻辑，其余如判断是否是单一节点之类的，在补充代码就好</li>\n</ol>\n","site":{"data":{}},"cover":"/img/img3.jpg","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个简易版自定义流程图编辑器，antV-X6 + vue3 实现。<br><img src=\"/images/flow/img1.png\" alt=\"路程图页面\"></p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/hystericalPerson/vue3-x6-editor-demo\">项目地址</a><br><a href=\"https://github.com/hystericalPerson/vue3-x6-editor-demo\">https://github.com/hystericalPerson/vue3-x6-editor-demo</a></p>\n<h2 id=\"组件结构\"><a href=\"#组件结构\" class=\"headerlink\" title=\"组件结构\"></a>组件结构</h2><p>流程图组件由三部分组件构成：</p>\n<ul>\n<li>左侧流程子组件 <code>dnd</code></li>\n<li>中间画布组件 <code>graph</code></li>\n<li>右侧节点信息组件<code>nodeInfo</code></li>\n</ul>\n<p><strong>注意</strong>：左侧的流程子组件可以从<code>dnd</code>和<code>step</code>中选择一个。按照需要业务需要选择内置组件</p>\n<ul>\n<li><code>dnd</code>组件拓展性强，基本由前端自己控制样式等，可选择vue或react等语言开发</li>\n<li><code>step</code>组件拓展性弱，是X6自身已封装好的组件，方便开发</li>\n</ul>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><ol>\n<li><p>首先在组件index.vue中设置三个组件的ref以及一个流程对象（将流程对象统一管理，方便后续维护开发）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义ref</span><br><span class=\"line\">const refDnd = ref(null)</span><br><span class=\"line\">const refGraph = ref(null)</span><br><span class=\"line\">const refNodeInfo = ref(null)</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义流程对象</span><br><span class=\"line\">const flow = reactive(&#123;</span><br><span class=\"line\">    graph: null,</span><br><span class=\"line\">    dnd: null,</span><br><span class=\"line\">    nodeInfo: null</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">provide(&#x27;flow&#x27;, flow)</span><br></pre></td></tr></table></figure></li>\n<li><p>在能获取DOM（vue中<code>onMounted</code>）的情况下，执行<code>graph</code>的<code>init</code>。graph的代码基本都在init中声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// graph init</span><br><span class=\"line\">const init = () =&gt; &#123;</span><br><span class=\"line\">    onCreateGraph()</span><br><span class=\"line\">    onBindKey()</span><br><span class=\"line\">    onBindPortsSetting()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在处理完2之后。执行<code>dnd.vue</code>的 <code>init</code>函数，然后将基本组件的拖拽事件绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化</span><br><span class=\"line\">const init = () =&gt; &#123;</span><br><span class=\"line\">    onCreateDnd()</span><br><span class=\"line\">    onRegisterV3Comp()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建dnd</span><br><span class=\"line\">const createDnd = () =&gt; &#123;</span><br><span class=\"line\">    editor.dnd = new Addon.Dnd(&#123;</span><br><span class=\"line\">        target: editor.graph,</span><br><span class=\"line\">        getDropNode: (node) =&gt; &#123;</span><br><span class=\"line\">            const cloneNode = node.clone(&#123; keepId: true &#125;)</span><br><span class=\"line\">            cloneNode.data = cmptCellInfo[cloneNode.id]</span><br><span class=\"line\">            // 清空选区</span><br><span class=\"line\">            nextTick(() =&gt; &#123;</span><br><span class=\"line\">                editor.graph.resetSelection(cloneNode)</span><br><span class=\"line\">                cellClickCallback(cloneNode)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            return cloneNode</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建vue组件的时候由于<code>template</code>覆盖了许多子组件的数据，因此在外部定义一个存储各个节点data的对象用于存储数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建vue3组件</span><br><span class=\"line\">const onRegisterV3Comp = () =&gt; &#123;</span><br><span class=\"line\">    for (const item in nodeInfo) &#123;</span><br><span class=\"line\">        Graph.registerVueComponent(`$&#123;item&#125;`, &#123;</span><br><span class=\"line\">            template: `&lt;$&#123;item&#125; :info=&quot;allNodeData[currentId]&quot;&gt;&lt;/$&#123;item&#125;&gt;`,</span><br><span class=\"line\">            components: &#123;</span><br><span class=\"line\">                [item]: nodeCmpt[item]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            data () &#123;</span><br><span class=\"line\">                return &#123;</span><br><span class=\"line\">                    flow: flow,</span><br><span class=\"line\">                    allNodeData: flow.allNodeData,</span><br><span class=\"line\">                    currentId: &#x27;&#x27;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            mounted () &#123;</span><br><span class=\"line\">                this.currentId = this.$el.closest(&#x27;[data-shape=vue-shape]&#x27;).getAttribute(&#x27;data-cell-id&#x27;)</span><br><span class=\"line\">                if (!this.flow.allNodeData[this.currentId]) &#123;</span><br><span class=\"line\">                    this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item))</span><br><span class=\"line\">                    cellNodeInfo.value &amp;&amp; (this.flow.allNodeData[this.currentId] = cloneDeep(cellNodeInfo.value))</span><br><span class=\"line\">                    !cellNodeInfo.value &amp;&amp; (this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item)))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, true)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>处理右侧节点信息展示的双向绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-input v-model:value=&quot;flow.nodeInfo.name&quot; addon-before=&quot;名称&quot; class=&quot;info-input&quot;/&gt;</span><br><span class=\"line\">&lt;a-input v-model:value=&quot;flow.nodeInfo.config&quot; addon-before=&quot;额外配置&quot; class=&quot;info-input&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>拓展业务可以从<code>flow.nodeInfo</code>对象中自己处理</p>\n</li>\n</ol>\n<p><strong>注意</strong>：处理好选中和未选中的情况</p>\n<ol start=\"5\">\n<li>增加保存子节点和流程图的按钮和函数</li>\n</ol>\n<p><strong>用push即可</strong></p>\n<ol start=\"6\">\n<li>在打开流程库的时候，使用遍历节点的方式将信息赋值到<code>flow.allNodeData</code>  </li>\n</ol>\n<p><strong>注意</strong>：不要使用自带的方法<code>formJSON</code>，没有遍历节点右侧展示信息会出错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 渲染画布</span><br><span class=\"line\">const renderGraph = (cells) =&gt; &#123;</span><br><span class=\"line\">    // 清空数据 画布</span><br><span class=\"line\">    flow.graph.clearCells()</span><br><span class=\"line\">    for (const key in flow.allNodeData) &#123;</span><br><span class=\"line\">        delete flow.allNodeData[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cells.forEach(cell =&gt; &#123;</span><br><span class=\"line\">        if (cell.shape !== &#x27;edge&#x27;) &#123;</span><br><span class=\"line\">            flow.allNodeData[cell.id] = cloneDeep(cell.data)</span><br><span class=\"line\">            flow.graph.addNode(cell)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    cells.forEach(cell =&gt; &#123;</span><br><span class=\"line\">        if (cell.shape === &#x27;edge&#x27;) &#123;</span><br><span class=\"line\">            flow.graph.addEdge(cell)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>完成基本业务逻辑，其余如判断是否是单一节点之类的，在补充代码就好</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckx5pipra0001nsungebja9oa","category_id":"ckx5pipri0005nsuneb5g3ntq","_id":"ckx5piprk0009nsun3l5q93gi"},{"post_id":"ckx5pipre0003nsundfd32uiz","category_id":"ckx5piprj0007nsun30ql5mki","_id":"ckx5piprk000cnsun5itt1dly"}],"PostTag":[{"post_id":"ckx5pipra0001nsungebja9oa","tag_id":"ckx5piprg0004nsunf24w0gzd","_id":"ckx5piprk000ansun03ql2ro7"},{"post_id":"ckx5pipra0001nsungebja9oa","tag_id":"ckx5piprj0006nsun0hcygmlf","_id":"ckx5piprk000bnsun34y51fwl"},{"post_id":"ckx5pipre0003nsundfd32uiz","tag_id":"ckx5piprj0008nsun45ps6zzs","_id":"ckx5piprk000dnsun9rp5d6z9"}],"Tag":[{"name":"ES6","_id":"ckx5piprg0004nsunf24w0gzd"},{"name":"笔记","_id":"ckx5piprj0006nsun0hcygmlf"},{"name":"vue3","_id":"ckx5piprj0008nsun45ps6zzs"}]}}